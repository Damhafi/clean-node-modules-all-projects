const fs = require("fs");
const path = require("path");

// Exclui pastas geradas (node_modules e .next) de forma recursiva (cross-platform)
const deleteNodeModules = (dirPath) => {
  let entries;
  try {
    entries = fs.readdirSync(dirPath, { withFileTypes: true });
  } catch (err) {
    // Diretório inacessível ou removido durante a varredura
    return;
  }

  for (const entry of entries) {
    if (!entry.isDirectory()) continue;

    const subdirPath = path.join(dirPath, entry.name);

    if (entry.name === "node_modules" || entry.name === ".next") {
      try {
        fs.rmSync(subdirPath, { recursive: true, force: true, maxRetries: 3 });
        console.log(`Deleted: ${subdirPath}`);
      } catch (err) {
        console.error(`Failed to delete: ${subdirPath} -> ${err.message}`);
      }
      // Não desce dentro das pastas deletadas
      continue;
    }

    // Continua a varredura recursiva
    deleteNodeModules(subdirPath);
  }
};

// Diretório raiz onde estão os projetos (pode ser passado como argumento CLI)
// Ex.: node clean_node_modules.js "C:\\Users\\Damhafi\\Desktop"
const rootArg = process.argv[2];
const rootDir =
  rootArg && rootArg.trim().length > 0
    ? rootArg
    : "C:\\Users\\Damhafi\\Desktop";

if (!fs.existsSync(rootDir)) {
  console.error(`Root directory does not exist: ${rootDir}`);
  process.exit(1);
}

console.log(`Scanning recursively from: ${rootDir}`);
deleteNodeModules(rootDir);
console.log("Done.");
